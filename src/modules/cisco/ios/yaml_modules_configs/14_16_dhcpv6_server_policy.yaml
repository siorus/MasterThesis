---
type: "o" # Type of configuration command [o, i, m, c], o - one time in config e.g. "ip ssh version 2", i - applied on interface (onetime/manytime) e.g. portsecurity, m - multiple time e.g. defined aaa servers, c - under subcontext e.g. password for eigrp processes.

facility_type: [] # Type of facility on which module can be tested [r,l3sw,l2sw], empty means it does not matter

check_if_l3_protocol: # Run check only when specific L3 protocol is enabled on device [ipv4, ipv6], empty means skip checking.
  - "ipv6"

check_if_function: [] # Run check only when specific function is enabled on device e.g. rip, eigrp, ospf, bgp,vrrp, etc. empty means skip checking.

run_after_module: "" # Run this module only after specified module had been run before.

run_after_module_match_status: "" # Run check only when module specified in variable run_after_module had status Successful/Error/Matched by equivalent stored in cmd_match_status. If None is specified, then stored value does not matter [successful, error, matched by equivalent, none].

applicable_to_interface_type: [] # Type of interface from device.yaml, module will be run only on interfaces with specified interface type, logical OR is used if more than one type is defined. If at least one type is matched, than looking for regex can be applied. When blank list is defined, command must be set on every interface.
  
non_applicable_to_interface_type: [] # Type of interface from device.yaml, module will be run only on interfaces non containing specified interface type, logical OR is used if more than one type is defined. If at least one type is matched, than looking for regex will not be applied. When blank list is defined, interface type check is skipped.

cannot_determine_search_or_fix: "false" # True in case not enough information obtained e.g. no interface set as 'wan'

cannot_determine_search_or_fix_comment: "" # Information when previous variable is True

eliminated: "false" # True when "check_if_l3_protocol or "check_if_function" values not in specific device, e.g. when device has no eigrp configured, so module looking for eigrp authentication will not be run.

name_cmd_general: "DHCPv6 Server policy" # Name seen in report output.

name_of_area: "First Hop Security" # Area of cmd/check, it will be seen in report output.

default_cmd_general_severity: "critical" # Severity which defines importance of found problem [critical, high, medium, low, notice]

user_cmd_general_severity: "none" # Severity which defines importance of found problem specified by admin according to company's policy [critical, high, medium, low, notice] Default: none

regex_cmd: # Regex to match and find occurrence, when more than one specified, then it works like logical OR, looking for another in row when previous search is not successful.
  - '^.*(?:(?<!no ))ipv6 dhcp guard policy (.*)$(?:.*\r?\n(?!\!))+?(^ *device-role server$)(?:.*\r?\n)*?(?=\!)'

regex_context: '' # Regex under which previous variable "regex_cmd" is matched and searched, subcontext, e.g. passive interface is under command "router eigrp" or even under address families

regex_cmd_occurrence: "occurrence" # Specifies whether module should look for regex occurrence or non-occurrence match, "occurrence" - set when regex occurrence in variable "regex_cmd" signalize no issue, "nonoccurrence" - set when regex non-occurrence in variable "regex_cmd" signalize no issue

cmd_match_status: "not run" # Variable to store whether regex matches or not [successful, error, not run, matched by equivalent], successful - security feature is configured as expected, error - security feature is not configured as expected, not run - this module has not been started yet, matched by equivalent - equivalent module found wished setting.

general_comment: "" # General comment for any kind of output of module

mark_module_as: [] # After successful match of this module, another can be marked as successful or error and does not have to be checked or previous "cmd_match_status" can be overwritten. Position in list corresponds with position of regex in "regex_cmd".

matched_values: [] # Saved matched strings from device running configuration.

public_vars: # Variables needed for generating configuration fix e.g. - snmp_user: "administrator1".
  - dhcpv6_server_policy: "group(1)"
  
secret_vars: [] # Variable that holds secret until configuration fix is generated after that it is cleared due to security e.g. - password: "" .

eliminate_all_matched: "false" # When True, all matches will get will get string prefix from "eliminate_prefix" to eliminate them [true, false].

eliminate_prefix: "" # Prefix string for matched commands to eliminated matched strings.

fix_cmd: # Command to resolve problem, you can use stored variables with prefix $ or future variables which are now empty and will be matched by regex. For fix it is necessary to define same variable in own_variables.yaml.
  - "ipv6 dhcp guard policy $dhcpv6_server_policy"
  - "device-role server"

fix_to_apply: "" # This is generated by program, string which will be appended to fix output document and apllied to device.

fix_cmd_notice: '' # Notice seen in report when fix will be applied e.g. notice about something can stop working after applying fix.

fix_cmd_ignore: "false" # Boolean which indicates whether a fix will be ignored or applied [true, false].

fix_cmd_ignore_comment: "" # Comment to specify reason why command for fix is ignored, reason or comment about accepting the risk.

fix_cmd_false_positive: "false" # Boolean which indicates finding an issue is false positive [true, false].

fix_cmd_false_positive_comment: "" # Comment to specify reason why is finding marked as false positive

affected_ports: [] # List of ports where issue is found when variable "type" is "i"

affected_context: [] # List of contexts where issue is found when variable "type" is "c", e.g. context "router eigrp 1", "router eigrp 2",...

explicit_ignored_ports: [] # List of ports which should be ignored. Can be overwritten to exclude interfaces from check.

explicit_ignored_ports_comment: "" # Comment to specify reason why ignore command is applied.

